// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vertex.proto

/*
Package graph is a generated protocol buffer package.

It is generated from these files:
	vertex.proto

It has these top-level messages:
	Vertex
	Edge
*/
package graph

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Digraph int32

const (
	Digraph_Directed   Digraph = 0
	Digraph_Undirected Digraph = 1
)

var Digraph_name = map[int32]string{
	0: "Directed",
	1: "Undirected",
}
var Digraph_value = map[string]int32{
	"Directed":   0,
	"Undirected": 1,
}

func (x Digraph) String() string {
	return proto.EnumName(Digraph_name, int32(x))
}
func (Digraph) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Vertex struct {
	Id         string                          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Label      string                          `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	Properties map[string]*google_protobuf.Any `protobuf:"bytes,3,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Edges      map[string]*Edge                `protobuf:"bytes,4,rep,name=edges" json:"edges,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Vertex) Reset()                    { *m = Vertex{} }
func (m *Vertex) String() string            { return proto.CompactTextString(m) }
func (*Vertex) ProtoMessage()               {}
func (*Vertex) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Vertex) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Vertex) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Vertex) GetProperties() map[string]*google_protobuf.Any {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *Vertex) GetEdges() map[string]*Edge {
	if m != nil {
		return m.Edges
	}
	return nil
}

type Edge struct {
	Id               string                          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	RelationshipType string                          `protobuf:"bytes,2,opt,name=relationshipType" json:"relationshipType,omitempty"`
	Properties       map[string]*google_protobuf.Any `protobuf:"bytes,3,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IsDirected       Digraph                         `protobuf:"varint,4,opt,name=isDirected,enum=graph.Digraph" json:"isDirected,omitempty"`
	Weight           float32                         `protobuf:"fixed32,5,opt,name=weight" json:"weight,omitempty"`
}

func (m *Edge) Reset()                    { *m = Edge{} }
func (m *Edge) String() string            { return proto.CompactTextString(m) }
func (*Edge) ProtoMessage()               {}
func (*Edge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Edge) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Edge) GetRelationshipType() string {
	if m != nil {
		return m.RelationshipType
	}
	return ""
}

func (m *Edge) GetProperties() map[string]*google_protobuf.Any {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *Edge) GetIsDirected() Digraph {
	if m != nil {
		return m.IsDirected
	}
	return Digraph_Directed
}

func (m *Edge) GetWeight() float32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

func init() {
	proto.RegisterType((*Vertex)(nil), "graph.Vertex")
	proto.RegisterType((*Edge)(nil), "graph.Edge")
	proto.RegisterEnum("graph.Digraph", Digraph_name, Digraph_value)
}

func init() { proto.RegisterFile("vertex.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 342 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x50, 0x4f, 0x4b, 0xfb, 0x40,
	0x14, 0xfc, 0x65, 0xdb, 0xf4, 0xa7, 0xaf, 0x25, 0x96, 0xa5, 0xc8, 0x5a, 0x11, 0x62, 0x2f, 0x86,
	0x1e, 0xb6, 0x50, 0x2f, 0xa2, 0x78, 0x10, 0xda, 0xbb, 0xc4, 0x3f, 0xf7, 0xd4, 0x3c, 0xd3, 0xc5,
	0x90, 0x84, 0xcd, 0xb6, 0x9a, 0xef, 0xe2, 0x17, 0xf1, 0xdb, 0x49, 0x76, 0x13, 0x4d, 0x6d, 0xc1,
	0x93, 0xa7, 0xe4, 0xcd, 0xce, 0xcc, 0x9b, 0x37, 0xd0, 0x5b, 0xa3, 0x54, 0xf8, 0xc6, 0x33, 0x99,
	0xaa, 0x94, 0xda, 0x91, 0x0c, 0xb2, 0xe5, 0xf0, 0x28, 0x4a, 0xd3, 0x28, 0xc6, 0x89, 0x06, 0x17,
	0xab, 0xe7, 0x49, 0x90, 0x14, 0x86, 0x31, 0xfa, 0x20, 0xd0, 0x79, 0xd4, 0x12, 0xea, 0x00, 0x11,
	0x21, 0xb3, 0x5c, 0xcb, 0xdb, 0xf7, 0x89, 0x08, 0xe9, 0x00, 0xec, 0x38, 0x58, 0x60, 0xcc, 0x88,
	0x86, 0xcc, 0x40, 0xaf, 0x01, 0x32, 0x99, 0x66, 0x28, 0x95, 0xc0, 0x9c, 0xb5, 0xdc, 0x96, 0xd7,
	0x9d, 0x9e, 0x70, 0xbd, 0x87, 0x1b, 0x23, 0x7e, 0xfb, 0xf5, 0x3e, 0x4f, 0x94, 0x2c, 0xfc, 0x86,
	0x80, 0x72, 0xb0, 0x31, 0x8c, 0x30, 0x67, 0x6d, 0xad, 0x64, 0x9b, 0xca, 0x79, 0xf9, 0x64, 0x44,
	0x86, 0x36, 0xbc, 0x83, 0x83, 0x1f, 0x76, 0xb4, 0x0f, 0xad, 0x17, 0x2c, 0xaa, 0xa0, 0xe5, 0x2f,
	0x1d, 0x83, 0xbd, 0x0e, 0xe2, 0x15, 0xea, 0xa4, 0xdd, 0xe9, 0x80, 0x9b, 0x7b, 0x79, 0x7d, 0x2f,
	0xbf, 0x49, 0x0a, 0xdf, 0x50, 0x2e, 0xc9, 0x85, 0x35, 0x9c, 0x03, 0x7c, 0x6f, 0xda, 0xe1, 0x77,
	0xba, 0xe9, 0xd7, 0xad, 0x42, 0x96, 0x9a, 0x86, 0xcd, 0xe8, 0x9d, 0x40, 0xbb, 0xc4, 0xb6, 0x9a,
	0x1b, 0x43, 0x5f, 0x62, 0x1c, 0x28, 0x91, 0x26, 0xf9, 0x52, 0x64, 0xf7, 0x45, 0x86, 0x55, 0x89,
	0x5b, 0x38, 0xbd, 0xda, 0xd1, 0xe7, 0x71, 0x63, 0xe1, 0x2f, 0x6d, 0x82, 0xc8, 0x67, 0x42, 0xe2,
	0x93, 0xc2, 0x90, 0xb5, 0x5d, 0xcb, 0x73, 0xa6, 0x4e, 0x25, 0x9e, 0x09, 0xfd, 0xf5, 0x1b, 0x0c,
	0x7a, 0x08, 0x9d, 0x57, 0x14, 0xd1, 0x52, 0x31, 0xdb, 0xb5, 0x3c, 0xe2, 0x57, 0xd3, 0x9f, 0xb4,
	0x3c, 0x3e, 0x83, 0xff, 0x55, 0x06, 0xda, 0x83, 0xbd, 0x3a, 0x43, 0xff, 0x1f, 0x75, 0x00, 0x1e,
	0x92, 0xb0, 0x9e, 0xad, 0x45, 0x47, 0x3b, 0x9c, 0x7f, 0x06, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xc6,
	0xa9, 0x8e, 0xbc, 0x02, 0x00, 0x00,
}
