// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vertex.proto

/*
Package client is a generated protocol buffer package.

It is generated from these files:
	vertex.proto

It has these top-level messages:
	Vertex
	Edge
	QueryRequest
	QueryReply
*/
package client

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Digraph int32

const (
	Digraph_Directed   Digraph = 0
	Digraph_Undirected Digraph = 1
)

var Digraph_name = map[int32]string{
	0: "Directed",
	1: "Undirected",
}
var Digraph_value = map[string]int32{
	"Directed":   0,
	"Undirected": 1,
}

func (x Digraph) String() string {
	return proto.EnumName(Digraph_name, int32(x))
}
func (Digraph) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Vertex struct {
	Id         string                          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Label      string                          `protobuf:"bytes,2,opt,name=label" json:"label,omitempty"`
	Properties map[string]*google_protobuf.Any `protobuf:"bytes,3,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Edges      map[string]*Edge                `protobuf:"bytes,4,rep,name=edges" json:"edges,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Vertex) Reset()                    { *m = Vertex{} }
func (m *Vertex) String() string            { return proto.CompactTextString(m) }
func (*Vertex) ProtoMessage()               {}
func (*Vertex) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Vertex) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Vertex) GetLabel() string {
	if m != nil {
		return m.Label
	}
	return ""
}

func (m *Vertex) GetProperties() map[string]*google_protobuf.Any {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *Vertex) GetEdges() map[string]*Edge {
	if m != nil {
		return m.Edges
	}
	return nil
}

type Edge struct {
	Id               string                          `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	RelationshipType string                          `protobuf:"bytes,2,opt,name=relationshipType" json:"relationshipType,omitempty"`
	Properties       map[string]*google_protobuf.Any `protobuf:"bytes,3,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	IsDirected       Digraph                         `protobuf:"varint,4,opt,name=isDirected,enum=client.Digraph" json:"isDirected,omitempty"`
	Weight           float32                         `protobuf:"fixed32,5,opt,name=weight" json:"weight,omitempty"`
}

func (m *Edge) Reset()                    { *m = Edge{} }
func (m *Edge) String() string            { return proto.CompactTextString(m) }
func (*Edge) ProtoMessage()               {}
func (*Edge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Edge) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Edge) GetRelationshipType() string {
	if m != nil {
		return m.RelationshipType
	}
	return ""
}

func (m *Edge) GetProperties() map[string]*google_protobuf.Any {
	if m != nil {
		return m.Properties
	}
	return nil
}

func (m *Edge) GetIsDirected() Digraph {
	if m != nil {
		return m.IsDirected
	}
	return Digraph_Directed
}

func (m *Edge) GetWeight() float32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type QueryRequest struct {
	Text string `protobuf:"bytes,1,opt,name=text" json:"text,omitempty"`
}

func (m *QueryRequest) Reset()                    { *m = QueryRequest{} }
func (m *QueryRequest) String() string            { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()               {}
func (*QueryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QueryRequest) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

type QueryReply struct {
	Properties map[string]*Vertex `protobuf:"bytes,1,rep,name=properties" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *QueryReply) Reset()                    { *m = QueryReply{} }
func (m *QueryReply) String() string            { return proto.CompactTextString(m) }
func (*QueryReply) ProtoMessage()               {}
func (*QueryReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *QueryReply) GetProperties() map[string]*Vertex {
	if m != nil {
		return m.Properties
	}
	return nil
}

func init() {
	proto.RegisterType((*Vertex)(nil), "client.Vertex")
	proto.RegisterType((*Edge)(nil), "client.Edge")
	proto.RegisterType((*QueryRequest)(nil), "client.QueryRequest")
	proto.RegisterType((*QueryReply)(nil), "client.QueryReply")
	proto.RegisterEnum("client.Digraph", Digraph_name, Digraph_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Graph service

type GraphClient interface {
	// Sends a greeting
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error)
}

type graphClient struct {
	cc *grpc.ClientConn
}

func NewGraphClient(cc *grpc.ClientConn) GraphClient {
	return &graphClient{cc}
}

func (c *graphClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error) {
	out := new(QueryReply)
	err := grpc.Invoke(ctx, "/client.Graph/Query", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Graph service

type GraphServer interface {
	// Sends a greeting
	Query(context.Context, *QueryRequest) (*QueryReply, error)
}

func RegisterGraphServer(s *grpc.Server, srv GraphServer) {
	s.RegisterService(&_Graph_serviceDesc, srv)
}

func _Graph_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GraphServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/client.Graph/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GraphServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Graph_serviceDesc = grpc.ServiceDesc{
	ServiceName: "client.Graph",
	HandlerType: (*GraphServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _Graph_Query_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vertex.proto",
}

func init() { proto.RegisterFile("vertex.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 429 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x92, 0x5f, 0x8b, 0xd3, 0x40,
	0x14, 0xc5, 0x77, 0xd2, 0xa6, 0xea, 0xdd, 0xd2, 0x2d, 0x97, 0x22, 0xd9, 0x20, 0x52, 0x06, 0xc1,
	0xd0, 0x87, 0x14, 0xb2, 0x2f, 0x22, 0x8b, 0xa0, 0xec, 0xea, 0x93, 0xa0, 0xf1, 0xcf, 0x7b, 0xba,
	0xb9, 0xa6, 0x83, 0x21, 0x89, 0x93, 0xc9, 0xba, 0xf9, 0x32, 0xfa, 0x45, 0xfc, 0x70, 0x92, 0x99,
	0xc4, 0x4d, 0xda, 0xa2, 0xbe, 0xec, 0xdb, 0xcc, 0xcd, 0x39, 0x67, 0xee, 0xf9, 0x11, 0x98, 0x5e,
	0x93, 0x54, 0x74, 0xe3, 0x17, 0x32, 0x57, 0x39, 0x4e, 0xae, 0x52, 0x41, 0x99, 0x72, 0x4f, 0x93,
	0x3c, 0x4f, 0x52, 0x5a, 0xeb, 0xe9, 0xa6, 0xfa, 0xb2, 0x8e, 0xb2, 0xda, 0x48, 0xf8, 0x2f, 0x0b,
	0x26, 0x9f, 0xb5, 0x07, 0x67, 0x60, 0x89, 0xd8, 0x61, 0x4b, 0xe6, 0x3d, 0x08, 0x2d, 0x11, 0xe3,
	0x02, 0xec, 0x34, 0xda, 0x50, 0xea, 0x58, 0x7a, 0x64, 0x2e, 0xf8, 0x02, 0xa0, 0x90, 0x79, 0x41,
	0x52, 0x09, 0x2a, 0x9d, 0xd1, 0x72, 0xe4, 0x1d, 0x07, 0x8f, 0x7d, 0xf3, 0x90, 0x6f, 0x92, 0xfc,
	0x77, 0x7f, 0x04, 0x97, 0x99, 0x92, 0x75, 0xd8, 0x73, 0xe0, 0x1a, 0x6c, 0x8a, 0x13, 0x2a, 0x9d,
	0xb1, 0xb6, 0x9e, 0xee, 0x58, 0x2f, 0x9b, 0x6f, 0xc6, 0x65, 0x74, 0xee, 0x07, 0x38, 0xd9, 0xc9,
	0xc3, 0x39, 0x8c, 0xbe, 0x52, 0xdd, 0xae, 0xda, 0x1c, 0x71, 0x05, 0xf6, 0x75, 0x94, 0x56, 0xa4,
	0x77, 0x3d, 0x0e, 0x16, 0xbe, 0x69, 0xec, 0x77, 0x8d, 0xfd, 0x97, 0x59, 0x1d, 0x1a, 0xc9, 0x73,
	0xeb, 0x19, 0x73, 0x5f, 0x03, 0xdc, 0xbe, 0x74, 0x20, 0x8f, 0x0f, 0xf3, 0xa6, 0xdd, 0x96, 0x8d,
	0xa9, 0x97, 0xc3, 0x7f, 0x58, 0x30, 0x6e, 0x66, 0x7b, 0xf0, 0x56, 0x30, 0x97, 0x94, 0x46, 0x4a,
	0xe4, 0x59, 0xb9, 0x15, 0xc5, 0xc7, 0xba, 0xa0, 0x96, 0xe3, 0xde, 0x1c, 0xcf, 0x0f, 0x20, 0x7d,
	0xd4, 0x7f, 0xf1, 0x1f, 0x40, 0x41, 0x94, 0x17, 0x42, 0xd2, 0x95, 0xa2, 0xd8, 0x19, 0x2f, 0x99,
	0x37, 0x0b, 0x4e, 0x3a, 0xf7, 0x85, 0x48, 0x64, 0x54, 0x6c, 0xc3, 0x9e, 0x04, 0x1f, 0xc2, 0xe4,
	0x3b, 0x89, 0x64, 0xab, 0x1c, 0x7b, 0xc9, 0x3c, 0x2b, 0x6c, 0x6f, 0x77, 0x02, 0x9a, 0x73, 0x98,
	0xbe, 0xaf, 0x48, 0xd6, 0x21, 0x7d, 0xab, 0xa8, 0x54, 0x88, 0x30, 0x56, 0x74, 0xa3, 0xda, 0x48,
	0x7d, 0xe6, 0x3f, 0x19, 0x40, 0x2b, 0x2a, 0xd2, 0x1a, 0x5f, 0x0d, 0x70, 0x30, 0x8d, 0x83, 0x77,
	0x85, 0x6e, 0x75, 0x7f, 0x83, 0xe2, 0xbe, 0xfd, 0x9f, 0x2e, 0x4f, 0x86, 0x5d, 0x66, 0xc3, 0x5f,
	0xb1, 0xd7, 0x62, 0xf5, 0x14, 0xee, 0xb5, 0x24, 0x71, 0x0a, 0xf7, 0x3b, 0x92, 0xf3, 0x23, 0x9c,
	0x01, 0x7c, 0xca, 0xe2, 0xee, 0xce, 0x82, 0x73, 0xb0, 0xdf, 0x68, 0xd9, 0x19, 0xd8, 0x7a, 0x55,
	0x5c, 0xec, 0x6c, 0xae, 0x31, 0xb8, 0xb8, 0xdf, 0x87, 0x1f, 0x6d, 0x26, 0x9a, 0xe2, 0xd9, 0xef,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x34, 0x19, 0x46, 0xc6, 0x03, 0x00, 0x00,
}
