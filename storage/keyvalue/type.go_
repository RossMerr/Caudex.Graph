// Copyright (c) 2018 Ross Merrigan
//
// This software is released under the MIT License.
// https://opensource.org/licenses/MIT

package keyvalue

// Type user-defined scalar type
type Type uint

const (
	String Type = iota
	//Bool type represents the set of Boolean truth values denoted by the predeclared constants true and false
	Bool
	// Int8 the set of all signed  8-bit integers (-128 to 127)
	Int8
	// Int16 the set of all signed 16-bit integers (-32768 to 32767)
	Int16
	// Int32 the set of all signed 32-bit integers (-2147483648 to 2147483647)
	Int32
	// Int64 the set of all signed 64-bit integers (-9223372036854775808 to 9223372036854775807)
	Int64
	// Uint8 the set of all unsigned  8-bit integers (0 to 255)
	Uint8
	// Uint16 the set of all unsigned 16-bit integers (0 to 65535)
	Uint16
	// Uint32 the set of all unsigned 32-bit integers (0 to 4294967295)
	Uint32
	// Uint64 the set of all unsigned 64-bit integers (0 to 18446744073709551615)
	Uint64
	// Float32 the set of all IEEE-754 32-bit floating-point numbers
	Float32
	// Float64 the set of all IEEE-754 64-bit floating-point numbers
	Float64
	Complex64
	Complex128
	Byte
)

var typesAry = [...]string{
	String:     "string",
	Bool:       "bool",
	Int8:       "int8",
	Int16:      "int16",
	Int32:      "int32",
	Int64:      "int64",
	Uint8:      "uint8",
	Uint16:     "uint16",
	Uint32:     "uint32",
	Uint64:     "uint64",
	Float32:    "float32",
	Float64:    "float64",
	Complex64:  "complex64",
	Complex128: "complex128",
	Byte:       "byte",
}

var types map[string]Type

func init() {
	types = make(map[string]Type)
	for tok := String; tok <= Complex128; tok++ {
		types[typesAry[tok]] = tok
	}
}

// String returns the string representation of the type.
func (s Type) String() string {
	if s >= 0 && s < Type(len(typesAry)) {
		return typesAry[s]
	}
	return ""
}
